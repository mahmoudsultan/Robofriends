{"version":3,"sources":["reportWebVitals.js","components/Sroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Scroll","children","className","Card","id","name","email","width","height","src","alt","CardList","robots","length","map","robot","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundry","props","state","hasError","error","info","console","this","setState","Component","App","useState","setRobots","searchField","setSearchField","loading","setLoading","useEffect","a","fetch","response","json","robotsJson","getRobotsFromAPI","filteredRobots","filter","toLowerCase","includes","event","target","value","ReactDOM","render","StrictMode","document","getElementById","log"],"mappings":"sQAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4CCGCQ,G,YARA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,qBAAKC,UAAU,uBAAf,SACID,MCSOE,G,MAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,sBAAKJ,UAAU,4CAAf,UACE,qBAAKK,MAAM,MAAMC,OAAO,MAAMC,IAAG,+BAA0BL,EAA1B,YAAwCM,IAAG,gBAAWL,KACvF,gCACE,oBAAIH,UAAU,WAAd,SAA2BG,IAC3B,mBAAGH,UAAU,QAAb,SAAuBI,YCkBhBK,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OAAKA,EAAOC,OAKV,mCACE,cAAC,EAAD,UAEED,EAAOE,KAAI,SAACC,GACV,OACE,cAAC,EAAD,CAEEX,GAAIW,EAAMX,GAAIC,KAAMU,EAAMV,KAC1BC,MAAOS,EAAMT,OAHf,gBACgBS,EAAMX,YAVvB,oBAAIF,UAAU,KAAd,sCCSIc,G,MAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKf,UAAU,SAAf,SACE,uBACEgB,SAAUD,EACVf,UAAU,kCACViB,KAAK,SACLC,YAAY,wB,6BCgBLC,E,kDAtBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAU,GAJK,E,8DAQDC,EAAOC,GACvBC,QAAQF,MAAMA,EAAOC,GACrBE,KAAKC,SAAS,CAAEL,UAAU,M,+BAI1B,OAAII,KAAKL,MAAMC,SACN,+DAGFI,KAAKN,MAAMrB,a,GAnBK6B,aCqDZC,EA5CH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTpB,EADS,KACDqB,EADC,OAEsBD,mBAAS,IAF/B,mBAETE,EAFS,KAEIC,EAFJ,OAGcH,oBAAS,GAHvB,mBAGTI,EAHS,KAGAC,EAHA,KAShBC,qBAAU,YACc,uCAAG,8BAAAC,EAAA,sEACAC,MAbN,8CAYM,cACjBC,EADiB,gBAEEA,EAASC,OAFX,OAEjBC,EAFiB,OAIvBV,EAAUU,GACVN,GAAW,GALY,2CAAH,qDAQtBO,KACC,IAEH,IAAMC,EAAiBjC,EAAOkC,QAAO,SAAC/B,GACpC,OAAOA,EAAMV,KAAK0C,cAAcC,SAASd,EAAYa,kBAGvD,OACE,qCACE,oBAAI7C,UAAU,oBAAd,yBACA,mBAAGA,UAAU,YAAb,iCACA,cAAC,EAAD,CAAWe,aAxBQ,SAACgC,GACtBd,EAAec,EAAMC,OAAOC,UAyB1B,cAAC,EAAD,UAEQf,EACK,4CAEA,cAAC,EAAD,CAAUxB,OAAQiC,UCtCrCO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjE,EAAgBoC,QAAQ8B,O","file":"static/js/main.79b3e18d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './Scroll.css';\n\nconst Scroll = ({ children }) => {\n  return (\n    <div className='scrollable-on-mobile'>\n      { children }\n    </div>\n  );\n}\n\nexport default Scroll;\n","import './Card.css'\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='dib tc ma3 pa3 br3 bw2 card grow shadow-2'>\n      <img width=\"200\" height=\"200\" src={`https://robohash.org/${id}?200x200`} alt={`robot-${name}`} />\n      <div>\n        <h2 className='white f2'>{ name }</h2>\n        <p className='white'>{ email }</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import Scroll from './Sroll';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  if (!robots.length) {\n    return <h2 className=\"tc\">Nothing to show here...</h2>;\n  }\n\n  return (\n    <>\n      <Scroll>\n      {\n        robots.map((robot) => {\n          return (\n            <Card \n              key={`robot-${robot.id}`}\n              id={robot.id} name={robot.name}\n              email={robot.email} />\n          );\n        })\n      }\n      </Scroll>\n    </>\n  );\n};\n\nexport default CardList;\n","import './SearchBox.css';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"tc pa2\">\n      <input\n        onChange={searchChange}\n        className=\"pa3 mb5 input-box search-box ba\"\n        type=\"search\"\n        placeholder='Search Robots..' />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    console.error(error, info);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops... Something Went Wrong!</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import { useState, useEffect } from 'react';\n\nimport './App.css'\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nconst ROBOTS_API_URI = 'https://jsonplaceholder.typicode.com/users';\n\nconst App = () => {\n  const [robots, setRobots] = useState([]);\n  const [searchField, setSearchField] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  const onSearchChange = (event) => {\n    setSearchField(event.target.value);\n  }\n\n  useEffect(() => {\n    const getRobotsFromAPI = async () => {\n      const response = await fetch(ROBOTS_API_URI);\n      const robotsJson = await response.json();\n\n      setRobots(robotsJson);\n      setLoading(false);\n    }\n\n    getRobotsFromAPI();\n  }, []);\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n  \n  return (\n    <>\n      <h1 className='tc f-headline mb2'>RoboFriends</h1>\n      <p className='tc mb5 f3'>My First React App.</p>\n      <SearchBox searchChange={onSearchChange} />\n\n      <ErrorBoundry>\n        {(() => {\n          if (loading) {\n            return <h2>Loading...</h2>;\n          } else {\n            return <CardList robots={filteredRobots} />;\n          }\n        })()}\n      </ErrorBoundry>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'tachyons';\nimport './index.css';\n\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}